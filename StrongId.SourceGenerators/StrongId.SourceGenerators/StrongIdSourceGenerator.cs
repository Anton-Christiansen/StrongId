using System;
using System.Text;
using Microsoft.CodeAnalysis;

namespace StrongId.SourceGenerators;

[Generator]
public class StrongIdSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new StrongIdSyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not StrongIdSyntaxReceiver receiver)
        {
            return;
        }

        foreach (var ingredients in receiver.Ingredients)
        {
            var record = GenerateStrongIdRecordText(ingredients);
            var partial = GenerateStrongIdPartialClassText(ingredients);

            context.AddSource($"{ingredients.Class}Id.g.cs", record);
            context.AddSource($"{ingredients.Class}.g.cs", partial);
        }
    }


    private static string GenerateStrongIdPartialClassText(StrongIdIngredients ingredients)
    {
        var strBuilder = new StringBuilder();
        StartNamespace(ingredients.Namespace, strBuilder);


        int indent = 0;
        // For every outer class (if the marked class is nested within other classes)
        foreach (string @class in ingredients.Classes)
        {
            StartPartialClass(@class, indent, strBuilder);
            indent++;
        }

        // Marked class
        StartPartialClass(ingredients.Class, indent, strBuilder);
        indent++;

        StrongIdProperty(ingredients.Class, indent, ingredients.Parameters.ParameterName, strBuilder);

        for (; indent > 0; indent--)
        {
            EndPartialClass(indent - 1, strBuilder);
        }

        return strBuilder.ToString();
    }

    private static string GenerateStrongIdRecordText(StrongIdIngredients ingredients)
    {
        var strBuilder = new StringBuilder();
        StartNamespace(ingredients.Namespace, strBuilder);

        strBuilder.AppendLine(
            $$"""
              public sealed record {{ingredients.Class}}Id
              {
              {{'\t'}}private {{ingredients.Class}}Id({{ingredients.Parameters.ParameterType}} id)
              {{'\t'}}{
              {{'\t'}}{{'\t'}}Value = id;
              {{'\t'}}}

              {{'\t'}}public {{ingredients.Parameters.ParameterType}} Value { get; init; }

              {{'\t'}}public static {{ingredients.Class}}Id Create({{ingredients.Parameters.ParameterType}} id) => new {{ingredients.Class}}Id(id);
              }
              """);

        return strBuilder.ToString();
    }


    private static string GetIndention(int indent)
    {
        return new string('\t', indent);
    }


    private static void StartPartialClass(string className, int indent, StringBuilder strBuilder)
    {
        string indention = GetIndention(indent);
        strBuilder.AppendLine(
            $$"""
              {{indention}}public partial class {{className}}
              {{indention}}{
              """);
    }

    private static void StrongIdProperty(string className, int indent, string parameterName, StringBuilder strBuilder)
    {
        string indention = GetIndention(indent);
        strBuilder.AppendLine($@"{indention}public {className}Id {parameterName} {{ get; private set; }}");
    }

    private static void EndPartialClass(int indent, StringBuilder strBuilder)
    {
        string indention = GetIndention(indent);
        strBuilder.AppendLine(
            $$"""
              {{indention}}}
              """);
    }

    private static void StartNamespace(string @namespace, StringBuilder strBuilder)
    {
        strBuilder.AppendLine(
            $$"""
              // <auto-generated/>

              namespace {{@namespace}};

              """);
    }
}