using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace StrongId.SourceGenerators.Tests;

public class StrongIdSourceGeneratorTests
{
    [Fact]
    public void GenerateStrongId()
    {
        string input =
            """
            namespace StrongId.Sample;

            [StrongId]
            public partial class SampleEntity
            {
            }
            """;


        string expectedPartialOutput =
            """
            // <auto-generated/>

            namespace StrongId.Sample;

            public partial class SampleEntity
            {
            	public SampleEntityId Id { get; private set; }
            }

            """;


        string expectedStrongIdOutput =
            $$"""
              // <auto-generated/>

              namespace StrongId.Sample;

              public sealed record SampleEntityId
              {
              {{'\t'}}private SampleEntityId(System.Guid id)
              {{'\t'}}{
              {{'\t'}}{{'\t'}}Value = id;
              {{'\t'}}}

              {{'\t'}}public System.Guid Value { get; init; }

              {{'\t'}}public static SampleEntityId Create(System.Guid id) => new SampleEntityId(id);
              }

              """;

        // Assign
        var generator = new StrongIdSourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(StrongIdSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(input) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });


        // Act
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var partialClass = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntity.g.cs"));
        var strongIdRecord = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntityId.g.cs"));


        // Assert
        Assert.Equal(expectedPartialOutput, partialClass.GetText().ToString(),
            ignoreLineEndingDifferences: true);

        Assert.Equal(expectedStrongIdOutput, strongIdRecord.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

    [Fact]
    public void GenerateStronglyTypedId()
    {
        string input =
            """
            namespace StrongId.Sample;

            [StrongId(ParameterType = typeof(int))]
            public partial class SampleEntity
            {
            }
            """;


        string expectedPartialOutput =
            """
            // <auto-generated/>

            namespace StrongId.Sample;

            public partial class SampleEntity
            {
            	public SampleEntityId Id { get; private set; }
            }

            """;


        string expectedStrongIdOutput =
            $$"""
              // <auto-generated/>

              namespace StrongId.Sample;

              public sealed record SampleEntityId
              {
              {{'\t'}}private SampleEntityId(int id)
              {{'\t'}}{
              {{'\t'}}{{'\t'}}Value = id;
              {{'\t'}}}

              {{'\t'}}public int Value { get; init; }

              {{'\t'}}public static SampleEntityId Create(int id) => new SampleEntityId(id);
              }

              """;

        // Assign
        var generator = new StrongIdSourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(StrongIdSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(input) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });


        // Act
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var partialClass = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntity.g.cs"));
        var strongIdRecord = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntityId.g.cs"));


        // Assert
        Assert.Equal(expectedPartialOutput, partialClass.GetText().ToString(),
            ignoreLineEndingDifferences: true);

        Assert.Equal(expectedStrongIdOutput, strongIdRecord.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

    [Fact]
    public void GenerateStronglyNamedId()
    {
        string input =
            """
            namespace StrongId.Sample;

            [StrongId(ParameterName = "Google")]
            public partial class SampleEntity
            {
            }
            """;


        string expectedPartialOutput =
            """
            // <auto-generated/>

            namespace StrongId.Sample;

            public partial class SampleEntity
            {
            	public SampleEntityId Google { get; private set; }
            }

            """;


        string expectedStrongIdOutput =
            $$"""
              // <auto-generated/>

              namespace StrongId.Sample;

              public sealed record SampleEntityId
              {
              {{'\t'}}private SampleEntityId(System.Guid id)
              {{'\t'}}{
              {{'\t'}}{{'\t'}}Value = id;
              {{'\t'}}}

              {{'\t'}}public System.Guid Value { get; init; }

              {{'\t'}}public static SampleEntityId Create(System.Guid id) => new SampleEntityId(id);
              }

              """;

        // Assign
        var generator = new StrongIdSourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(StrongIdSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(input) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });


        // Act
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var partialClass = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntity.g.cs"));
        var strongIdRecord = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntityId.g.cs"));


        // Assert
        Assert.Equal(expectedPartialOutput, partialClass.GetText().ToString(),
            ignoreLineEndingDifferences: true);

        Assert.Equal(expectedStrongIdOutput, strongIdRecord.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

    [Fact]
    public void GenerateStrongIdClassWithinClass()
    {
        string input =
            """
            namespace StrongId.Sample;

            [StrongId]
            public partial class SampleEntity
            {
                [StrongId]
                public partial class SampleEntity2
                {
                }
            }
            """;


        string expectedRecordOutput =
            $$"""
              // <auto-generated/>

              namespace StrongId.Sample;

              public sealed record SampleEntityId
              {
              {{'\t'}}private SampleEntityId(System.Guid id)
              {{'\t'}}{
              {{'\t'}}{{'\t'}}Value = id;
              {{'\t'}}}

              {{'\t'}}public System.Guid Value { get; init; }

              {{'\t'}}public static SampleEntityId Create(System.Guid id) => new SampleEntityId(id);
              }

              """;


        string expectedPartialOutput =
            $$"""
              // <auto-generated/>

              namespace StrongId.Sample;

              public partial class SampleEntity
              {
              {{'\t'}}public SampleEntityId Id { get; private set; }
              }

              """;


        string expectedRecord2Output =
            $$"""
              // <auto-generated/>

              namespace StrongId.Sample;

              public sealed record SampleEntity2Id
              {
              {{'\t'}}private SampleEntity2Id(System.Guid id)
              {{'\t'}}{
              {{'\t'}}{{'\t'}}Value = id;
              {{'\t'}}}

              {{'\t'}}public System.Guid Value { get; init; }

              {{'\t'}}public static SampleEntity2Id Create(System.Guid id) => new SampleEntity2Id(id);
              }

              """;

        string expectedPartial2Output =
            $$"""
              // <auto-generated/>

              namespace StrongId.Sample;

              public partial class SampleEntity
              {
              {{'\t'}}public partial class SampleEntity2
              {{'\t'}}{
              {{'\t'}}{{'\t'}}public SampleEntity2Id Id { get; private set; }
              {{'\t'}}}
              }

              """;


        // Assign
        var generator = new StrongIdSourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(StrongIdSourceGeneratorTests),
            [CSharpSyntaxTree.ParseText(input)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var partialClass = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntity.g.cs"));
        var partial2Class = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntity2.g.cs"));


        var record = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntityId.g.cs"));
        var record2 = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntity2Id.g.cs"));


        Assert.Equal(expectedPartialOutput, partialClass.GetText().ToString(),
            ignoreLineEndingDifferences: true);

        Assert.Equal(expectedPartial2Output, partial2Class.GetText().ToString(),
            ignoreLineEndingDifferences: true);

        Assert.Equal(expectedRecordOutput, record.GetText().ToString(),
            ignoreLineEndingDifferences: true);

        Assert.Equal(expectedRecord2Output, record2.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}