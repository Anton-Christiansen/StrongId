using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace StrongId.Tests;

public class StrongIdSourceGeneratorTests
{
    [Fact]
    public void GenerateStrongId()
    {
        string input = $@"namespace StrongId.Sample;


[StrongId]
public partial class SampleEntity
{{
    public string? Name {{ get; }} = ""Sample"";
    [StrongId]
    public partial class ShitStain
    {{
        
    }}
}}";


        string expectedPartialOutput = @"// <auto-generated/>

using SourceGenerated.Ids;

namespace StrongId.Sample
{

	public partial class SampleEntity
	{
		public SampleEntityId Id { get; private set; }
		public partial class ShitStain
		{
			public ShitStainId Id { get; private set; }
		}
	}
}
";
        
        
        string expectedStrongIdOutput = @"// <auto-generated/>

namespace SourceGenerated.Ids;

public sealed record SampleEntityId
{
    private SampleEntityId(System.Guid id)
    {
        Value = id;
    }

    public System.Guid Value { get; init; }

    public static SampleEntityId Create(System.Guid id) => new SampleEntityId(id);
}
";
        
        // Assign
        var generator = new StrongIdSourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(StrongIdSourceGeneratorTests), new[]{CSharpSyntaxTree.ParseText(input)},
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });
        
        
        // Act
        var runResult = driver.RunGenerators(compilation).GetRunResult();
        
        var partialClass = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntity.g.cs"));
        var strongIdRecord = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SampleEntityId.g.cs"));
            
        
        
        // Assert
        Assert.Equal(expectedPartialOutput, partialClass.GetText().ToString(),
            ignoreLineEndingDifferences: true);
        
        Assert.Equal(expectedStrongIdOutput, strongIdRecord.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}