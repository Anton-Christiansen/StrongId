using System.IO.Compression;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace StrongId;

[Generator]
public class StrongIdSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // throw new System.NotImplementedException();
    }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var syntaxTree in context.Compilation.SyntaxTrees)
        {
            var namespaceDeclarations =
                syntaxTree.GetRoot().DescendantNodes().OfType<FileScopedNamespaceDeclarationSyntax>().ToArray();
            
            
            foreach (var namespaceDeclaration in namespaceDeclarations)
            {
                string @namespace = namespaceDeclaration.Name.ToString();



                var children = namespaceDeclaration.ChildNodes().OfType<ClassDeclarationSyntax>().ToArray();
                foreach (var child in children)
                {
                    var result = TraverseNamespaceForMarkedClasses(child, context);
                    if (result.StrongIdClassFound)
                    {
                        string text = $@"// <auto-generated/>

using SourceGenerated.Ids;

namespace {@namespace}
{{
";
                        
                        text += result.GenerativeText;
                        
                        
                        text += @"
}
";
                        ;
                        context.AddSource($"{child.Identifier.Text}.g.cs", text);

                    }
                }

                
            }
        }
    }


    private StrongIdSearcher TraverseNamespaceForMarkedClasses(SyntaxNode syntaxNode,
        GeneratorExecutionContext context, int indent = 1)
    {
        bool found = false;
        string text = string.Empty;

        if (syntaxNode is ClassDeclarationSyntax classDeclaration)
        {
            var className = classDeclaration.Identifier.Text;
            text += StartPartialClass(className, indent);

            foreach (var attributeList in classDeclaration.AttributeLists)
            {
                foreach (var attribute in attributeList.Attributes)
                {
                    if (attribute.Name.ToFullString() == "StrongId")
                    {
                        found = true;
                        
                        var record = GenerateStrongIdRecordText(className);
                        context.AddSource($"{className}Id.g.cs", record);

                        
                        
                        text += GenerateStrongIdPropertyText(className, indent + 1);
                    }
                }
            }    
        }
        
        


        var kids = syntaxNode.ChildNodes().ToArray();
        foreach (var kid in kids)
        {
            if (kid is null) continue;
            
            var result = TraverseNamespaceForMarkedClasses(kid, context, indent + 1);
            if (result.StrongIdClassFound)
            {
                found = true;
                text += result.GenerativeText;
            }
        }

        text += EndPartialClass(indent);


        return new StrongIdSearcher(found, text);
    }

    private string GenerateStrongIdRecordText(string className)
    {
        
        return $@"// <auto-generated/>

namespace SourceGenerated.Ids;

public sealed record {className}Id
{{
    private {className}Id(System.Guid id)
    {{
        Value = id;
    }}

    public System.Guid Value {{ get; init; }}

    public static {className}Id Create(System.Guid id) => new {className}Id(id);
}}
";
    }



    private string GetIndention(int indent)
    {
        return new string( Enumerable.Range(0, indent).Select(x => '\t').ToArray());
    }
    
    
    private string StartPartialClass(string className, int indent)
    {
        string indention = GetIndention(indent);
        return @$"
{indention}public partial class {className}
{indention}{{
";
    }

    private string GenerateStrongIdPropertyText(string className, int indent)
    {
        string indention = GetIndention(indent);
        return $@"{indention}public {className}Id Id {{ get; private set; }}";
    }

    private string EndPartialClass(int indent)
    {
        string indention = GetIndention(indent);
        return $@"
{indention}}}";
    }


    public record StrongIdSearcher(bool StrongIdClassFound, string GenerativeText)
    {
        public bool StrongIdClassFound { get; set; } = StrongIdClassFound;
        public string GenerativeText { get; set; } = GenerativeText;
    }
}