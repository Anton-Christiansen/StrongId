using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace StrongId;

[Generator]
public class StrongIdSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new StrongIdSyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not StrongIdSyntaxReceiver receiver)
        {
            return;
        }

        foreach (var container in receiver.Ingredients)
        {
            var record = GenerateStrongIdRecordText(container);
            var partial = GenerateStrongIdPartialClass(container);
            
            context.AddSource($"{container.Class}Id.g.cs", record);
            context.AddSource($"{container.Class}.g.cs", partial);
        }
        
    }





    private static string GenerateStrongIdPartialClass(StrongIdIngredients ingredients)
    {
        var strBuilder = new StringBuilder();
        StartNamespaceText(ingredients.Namespace, strBuilder);

        int indent = 0;
        foreach (string @class in ingredients.Classes)
        {
            StartPartialClass(@class, indent, strBuilder);
            indent++;
        }
        
        StartPartialClass(ingredients.Class, indent, strBuilder);
        indent++;
        GenerateStrongIdPropertyText(ingredients.Class, indent, ingredients.Parameters.ParameterName, strBuilder);
        
        
        for (; indent > 0; indent--)
        {
            EndPartialClass(indent - 1, strBuilder);
        }

        return strBuilder.ToString();
    }
    
    
    private static string GenerateStrongIdRecordText(StrongIdIngredients ingredients)
    {
        return $$"""
                 // <auto-generated/>

                 namespace SourceGenerated.Ids;

                 public sealed record {{ingredients.Class}}Id
                 {
                     private {{ingredients.Class}}Id({{ingredients.Parameters.ParameterType}} id)
                     {
                         Value = id;
                     }
                 
                     public {{ingredients.Parameters.ParameterType}} Value { get; init; }
                 
                     public static {{ingredients.Class}}Id Create({{ingredients.Parameters.ParameterType}} id) => new {{ingredients.Class}}Id(id);
                 }

                 """;
    }


    private static string GetIndention(int indent)
    {
        return new string(Enumerable.Range(0, indent).Select(x => '\t').ToArray());
    }


    private static void StartPartialClass(string className, int indent, StringBuilder strBuilder)
    {
        string indention = GetIndention(indent);
        strBuilder.AppendLine($$"""
                     {{indention}}public partial class {{className}}
                     {{indention}}{
                     """);
    }

    private static void GenerateStrongIdPropertyText(string className, int indent, string parameterName, StringBuilder strBuilder)
    {
        string indention = GetIndention(indent);
        strBuilder.AppendLine($@"{indention}public {className}Id {parameterName} {{ get; private set; }}");
    }

    private static void EndPartialClass(int indent, StringBuilder strBuilder)
    {
        string indention = GetIndention(indent);
        strBuilder.AppendLine($$"""
                     {{indention}}}
                     """);
    }


    private static void StartNamespaceText(string @namespace, StringBuilder strBuilder)
    {
        strBuilder.AppendLine($$"""
                     // <auto-generated/>

                     using SourceGenerated.Ids;

                     namespace {{@namespace}};

                     """);
    }
}