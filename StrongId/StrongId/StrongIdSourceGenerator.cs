using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace StrongId;

[Generator]
public class StrongIdSourceGenerator : ISourceGenerator
{
    //private string _parameterType = "System.Guid";
    
    
    private const string EndNamespaceText = """

                                            }

                                            """;
    
    
    public void Initialize(GeneratorInitializationContext context)
    {
        // throw new System.NotImplementedException();
        //var creator = new StrongIdSyntaxReceiver();
    }

    public void Execute(GeneratorExecutionContext context)
    {
        
        
        
        
        foreach (var syntaxTree in context.Compilation.SyntaxTrees)
        {
            var namespaceDeclarations =
                syntaxTree.GetRoot().DescendantNodes().OfType<FileScopedNamespaceDeclarationSyntax>().ToArray();


            foreach (var namespaceDeclaration in namespaceDeclarations)
            {
                string @namespace = namespaceDeclaration.Name.ToString();



                var children = namespaceDeclaration.ChildNodes().OfType<ClassDeclarationSyntax>().ToArray();
                foreach (var child in children)
                {
                    var result = TraverseNamespaceForMarkedClasses(child, context);
                    if (result.StrongIdClassFound)
                    {
                        string text = StartNamespaceText(@namespace);
                        text += result.GenerativeText;
                        text += EndNamespaceText;

                        context.AddSource($"{child.Identifier.Text}.g.cs", text);

                    }
                }

            }
        }
    }


    private StrongIdSearcherResult TraverseNamespaceForMarkedClasses(SyntaxNode syntaxNode,
        GeneratorExecutionContext context, int indent = 1)
    {
        bool found = false;
        string text = string.Empty;

        if (syntaxNode is ClassDeclarationSyntax classDeclaration)
        {
            var className = classDeclaration.Identifier.Text;
            text += StartPartialClass(className, indent);

            foreach (var attributeList in classDeclaration.AttributeLists)
            {
                foreach (var attribute in attributeList.Attributes)
                {
                    if (attribute.Name.ToFullString() == "StrongId")
                    {
                        found = true;
                        var parameters = GetAttributeParameters(attribute);
                        
                        var record = GenerateStrongIdRecordText(className, parameters.ParameterType);
                        context.AddSource($"{className}Id.g.cs", record);
                        text += GenerateStrongIdPropertyText(className, indent + 1, parameters.ParameterName);
                    }
                }
            }
        }
        

        var kids = syntaxNode.ChildNodes().ToArray();
        foreach (var kid in kids)
        {
            if (kid is null) continue;

            var result = TraverseNamespaceForMarkedClasses(kid, context, indent + 1);
            if (result.StrongIdClassFound)
            {
                found = true;
                text += result.GenerativeText;
            }
        }

        text += EndPartialClass(indent);


        return new StrongIdSearcherResult(found, text);
    }

    private string GenerateStrongIdRecordText(string className, string parameterType)
    {

        return $$"""
                 // <auto-generated/>

                 namespace SourceGenerated.Ids;

                 public sealed record {{className}}Id
                 {
                     private {{className}}Id({{parameterType}} id)
                     {
                         Value = id;
                     }
                 
                     public {{parameterType}} Value { get; init; }
                 
                     public static {{className}}Id Create({{parameterType}} id) => new {{className}}Id(id);
                 }

                 """;
    }



    private string GetIndention(int indent)
    {
        return new string(Enumerable.Range(0, indent).Select(x => '\t').ToArray());
    }


    private string StartPartialClass(string className, int indent)
    {
        string indention = GetIndention(indent);
        return $$"""

                 {{indention}}public partial class {{className}}
                 {{indention}}{

                 """;
    }

    private string GenerateStrongIdPropertyText(string className, int indent, string parameterName)
    {
        string indention = GetIndention(indent);
        return $@"{indention}public {className}Id {parameterName} {{ get; private set; }}";
    }

    private string EndPartialClass(int indent)
    {
        string indention = GetIndention(indent);
        return $$"""

                 {{indention}}}
                 """;
    }


    private string StartNamespaceText(string @namespace)
    {
        return $$"""
                 // <auto-generated/>

                 using SourceGenerated.Ids;

                 namespace {{@namespace}}
                 {

                 """;
    }
    

    private StrongIdParameters GetAttributeParameters(AttributeSyntax attribute)
    {
        string parametertype = typeof(Guid).ToString();
        string parameterName = "Id";
        
        var arguments = attribute.ArgumentList?.Arguments ?? [];
        foreach (var syntax in arguments)
        {
            var parameter = syntax.NameEquals?.Name.ToString() ?? string.Empty;
            
            switch (parameter)
            {
                case "ParameterType":
                {
                    var expression = syntax.Expression.ToString();
                    parametertype = expression.Trim().Substring(7, expression.Length - 8);
                    break;
                }

                case "ParameterName":
                {
                    parameterName = syntax.Expression.ToString().Trim('"');
                    break;
                }
            }
        }
        
        return new StrongIdParameters(parametertype, parameterName);
        ;
    }

    private record StrongIdSearcherResult(bool StrongIdClassFound, string GenerativeText)
    {
        public bool StrongIdClassFound { get; } = StrongIdClassFound;
        public string GenerativeText { get; } = GenerativeText;
    }

    private record StrongIdParameters(string ParameterType, string ParameterName)
    {
        public string ParameterType { get; set; } = ParameterType;
        public string ParameterName { get; set; } = ParameterName;
    }
}